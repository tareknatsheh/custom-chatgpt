Backups
system overview
the adaptive pulses algorithm
the new algorithm for increasing and decreasing the difficulty
ball randomizer
gameplay
settings
difficulty
source code map
app main screen flow chart:
game tutorial:
easing mechanism (feature):
a) adds bubbles to the basket (disabled in 12-dec-2022)
b) giving boosters / filling booster meter
attention: it only works if you are playing the last level unlocked in the map.
C) level skip (disabled in 12-dec-2022):
stats screen
user stats
sensory level
sms service
email service
content
lessons
pop ups (tips)
character skins (outfits)
assessment
configuration
algorithm
tools
here are some of the used tools:
logcat
webgl version of the training app
trainpain level analysis tool (all levels overview)
ota firmware update
playfab
deleting a user in playfab:
research protocol
belgian study
daily users data extraction and analysis procedure
phase 2 distraction algorithm logic
backend
azure functions
aws
playfab data kusto query api using node js
healthbot
healthbot questionnaire service
playfab parameters:
azure healthbot parameters:
onesignal
in-app triggers
open-source code list
tools you may need:
fiddler classic
azure hitrust/hipaa resources compliance guide
ui/ux
shared working files and folders

here you will find (hopefully) all the knowledge that is relevant to all the technical aspects of our products.

Backups
the backup folder is in tarek@trainpain. Com account, and it is called backups.
Inside it you will find backups for the following:
glideapps google sheet scripts.
Playfab cloud script.
Playfab kusto data (playfab events).

The backing up process has to be done once a week (usually every thursday).

System overview
general block diagram:

the above diagram is a general high level representation of the main current building blocks of our product (22-jan-2020).

The adaptive pulses algorithm
distraction:
the intensity value is % of 100 not % of attention intensity.
It does not go above the intensity the user specifies in the user settings.
We usually say that:
medium distraction = 65%
high distraction = 75%
low distraction = 55%

adam has implemented it to:
take the intensity from the following playfab kvps:
(vibration_intensity_left) and (vibration_intensity_right)
which equals to 0, 1, or 2
where:
0: low intensity = 55%
1: medium intensity 75%
2: high intensity 85 %

the minimums:
after testing the motors, we have found that the minimum pulse length is 4 (60 ms) and the minimum interbeat is 3 (45 ms). But if we want the motor to reach the 100% full strength, we should use 5 for the pulse length (75 ms).

The new algorithm for increasing and decreasing the difficulty
in playfab it is configured using the kvp: algo_string
example:
algo_string : true:20:70:90:1:0

true: turns on the algorithm
20: run it every 20 launch events (ideally, every case takes 5 bubbles, but usually they are not evenly distributed).
70: if accuracy < 70% increase interbeat by 1 (make it easier)
90: if accuracy >= 90% decrease it by 1 (make it harder)
1: the amount to increase or decrease
0: if the user is in pattern mode, then increase or decrease length of long pulse by 0

note: if the accuracy in at least one of the cases is: 70% <= accuracy < 90% then the interbeat wont change.

Ball randomizer
as of 19-april-2020 the ball randomizer algorithm was implemented.
It shoots every ball type every 4 shots (if you have all the colors/balls on the screen).
It also works fine when you have 3 colors/balls.

/** the following needs to be reviewed **/

[10:21 am, 4/19/2020] elan schneider trainpain: a) the first ball of the level is random and not considered in the algorithm
[10:21 am, 4/19/2020] elan schneider trainpain: b) after you finish the last color of a certain ball, the next ball is random

/******************************************/

gameplay

settings
difficulty
updated on 19-mar-2023
there are 4 difficulty levels in the settings:
easy: warm up = no distractions recommended if you are struggling with the training
normal: phase 1 = new style distraction count pulses while ignoring distractions
hard: phase 2 = pattern task optional mode after training 6-8 weeks. Count only long pulses.
Very hard: phase 3 = pattern task optional mode after training 12-16 weeks. Count only long pulses while ignoring distractions.

Source code map
you can find it here:
https: //docs. Google. Com/spreadsheets/d/1hps9xk9fr3pjbczfulx66ngkwudowobi8libtaui14w/edit#gid=0

app main screen flow chart:
the following will happen when the user open the app at the main screen:

game tutorial:
we had a bug in the level 1 tutorial. (it did not know if the first ball was left or right, so sometimes the text in the tutorial would give the wrong side). Adam explained that the phone needed time to load this. So we made a patch, and added in a welcome pop up screen to give the tutorial time to load. We need to make sure we don't remove that pop up if we forget why we put it in there.....

In the levels text files, in this line:
powerups 0/0/0/0 corresponds to:
powerups fire/vine/water/sun

easing mechanism (feature):
adds bubbles to the basket (disabled in 12-dec-2022)
in every player data, there are 3 kvps dedicated to the easing mechanism:
bubbles_add_balls_after_fails: let it be y
bubbles_add_balls_amount: let it be z
min_fails_to_ease: let it be x

start easing after x fails. Every y fails (after the x which is the first adding) add z balls - adam

notes:
when the easing kicks in after x fails, it immediately adds z balls to the basket.
When a user logs out then logs in, the number of balls in the basket of the eased level gets reset to the initial amount.
In the next session the next day:
the user keeps the extra balls.
The failing counter keeps counting.

Giving boosters / filling booster meter

kvps are:
bubbles_ease_booster_every_x_fails: 1
bubbles_ease_fails_before_easing_booster: 2
bubbles_ease_modify_booster_fill: 2
bubble_powerup_fill_amount: 0.125 (1/8)

when this easing kicks in it will change (bubble_powerup_fill_amount) from 18 to 1/(8-2) = 16
attention: it only works if you are playing the last level unlocked in the map.

Level skip (disabled in 12-dec-2022):
this happens only in the backend, aka. It wont take effect until the user logout then login, or the next day/session when the app re-sync the kvp data from playfab.

Note: it only gets triggered when the current played level = the latest level, aka, if a user went back to an older level and failed it >= 3 times, the level skip script wont do anything.

As of today 18-oct-2021: the script will skip the level for the user if they failed it >= 3 times.
The way to skip it is by updating the kvp player_level_stars in the playfab backend.
As mentioned above, it wont take effect until the next day when the app re-sync this kvp.

This playfab backend script also sends a log to a google sheet by calling this endpoint:
https: //script. Google. Com/macros/s/akfycbzfnkxa9cuja6xc7vnimajva9rbzdrhcp_o7fzhuwd6rdb_rmrm/exec

google sheet container:
https: //docs. Google. Com/spreadsheets/d/1ox32m-tfr3mxur3vbxma-vns_al3vwf8l1ylvz8aw4a/edit#gid=0

stats screen
after finishing a session, the app will show a stats screen for the user.
It first shows completed sessions x/y
where x: is taken from current_session kvp
y: is taken from sessions_per_treatment kvp

if sessions_per_treatment=999, then it will show only: completed sessions x

user stats
session_end_stats = current_session + ": " + latest_play_streak + ": " + completed_levels + ": " + total_launches + ": " + cubs_saved + ": " + neroscore

current_session and neuroscore: are updated after every session by code: sendsms (bad name, i know)
latest_play_streak and completed_levels and total_launches: are updated every level-end in bubbleendlevel script

sensory level
example: it may say: sensory level 1/18
this is calculated from the max, min and current interbeats.
18 comes from (max - min) + 1 which usually have the values: (20 - 3) + 1
in terms of playfab kvps: (interbeat_max - interbeat_min) + 1

1 comes from (max - current) + 1
in terms of playfab kvps: (interbeat_max - latest_bubble_interbeat_left_a) + 1

sms service
what?
This is one of our communication channels with the users, where we send periodic reminders with education links, surveys, account confirmation and the app link.

Why?
Everyone has at least a basic smartphone capable of receiving sms messages.

How?
Using twilio, this is basically the workflow:

the above drawing is dynamically updated. To update it, open the file sms service flowchart inside the folder sms service.

Twilio for sms
email: tarek@trainpain. Com
password: zm.7+wbhxz&qk5r

twilio recovery code:
if you lose your phone, or don't have access to your verification device, this code is your failsafe to access your account.
Awdrkcr7iy7nbmd16qb-mikoyhwwinvlxkk3zbj4

important:
when you add a new number to twilio, go to:
https: //www. Twilio. Com/console/sms/settings/geo-permissions
and make sure that the targeted country is checked.

In twilio we have the following phone numbers:
israel
+972 52 296 0686
usa
+1 205 606 2482
belgium
+32 460 20 95 15

the logic is built in their service studio, this is a screenshot of the whole canvas, dated 19-dec-2019:

in the above shown canvas there are function widgets. You can find them in the functions section.
I am using the functions to make http requests to playfab api.
But there is already a widget called make http request widget, so why to use a function? You may ask. The request we want to make has an authentication header, and the widget does not (until this moment 19-dec-2019) have an option to pass the authentication data.

Email service
we use sendgrid for sending emails.

Developer tools:
css inliner tool

2 weeks active users report (sent by email to tarek, larry and elan):
the script: weekly active trainpain users email report
https: //script. Google. Com/d/1f3-n1vilxyodbo3pj6ketihoexia6m3v39jqh1vwbrsl7xtlrq7vbnev/edit? Usp=sharing

it is triggered weekly, every saturday.

Glideapps

go to https: //www. Glideapps. Com/ and sign-in using the following google account:
email: tarek@trainpain. Com

it is a platform that enables us to create simple apps for android and ios.
The apps are connected to a google spreadsheet.

The code:
after opening the glideapp main page, press on edit sheet to open the spreadsheet.
In google spreadsheet, press go to (tools/script editor) to open the script.

As of 16-feb-2020, you will find two scripts (code. Gs and dashboard. Gs).

Code. Gs
this script basically communicates with playfab and twilio.
It is used for creating new users.
It asks playfab to initialize the new user parameters and asks twilio to send them an sms (if needed).

Dashboard. Gs
this script handles the the dashboard logic for importing the user data from playfab and for sending the edit event to playfab when there is an edit.

For the code backup, check: tarek@trainpain. Com google drive: (my drive/backups/glideapps google sheet scripts backup)

content
lessons
there are 2 kvps:
lessons_data: which holds the the lessons object with title, id, task_goal, web link, ... Etc
lessons_status: holds the status string, as an example it has a value like this 221 which would mean:
the first and the second lessons are available and the user has opened them, and the third lesson is available but has not yet been opened by the user, and the renaming of the lessons are still locked.

It counts the sensory tasks the user has done and unlocks lessons accordingly.
When the app starts, it takes the initial value from playfab from the kvp total_correct_sesnory
the updated value of this kvp is taken from the levelendbubble event.

As of today 20-nov-2022, insights is made so that it would open only one new lesson after every session, even if (task_goal) is met for more than one lesson.

Pop ups (tips)
defined by the following kvp:
edu

character skins (outfits)
the default for skins status kvp (skins_status) is 2000000000000. Each number is a skin. 0 - locked, 1 - open, 2 - selected, 3 - new status

assessment
last updated 2023-04-19
please keep in mind that this part of the app always keeps changing.

Configuration
as of the above date, it works as the following:
it consists of 4 parts (tests)
test 0: counting w/o distraction
test 1: counting with distraction
test 2: pattern w/o distraction
test 3: pattern with distraction
it uses the following kvps from playfab:
the pulses are configured in the following kvps for each test:
assessment_data_1, assessment_data_2, assessment_data_3, assessment_data_4
for test 0 and test 1:
assess_interbeat_change, assess_interbeat_max, assess_interbeat_min
for test 2 and test 3:
assess_interbeat_pattern, assess_long_change, assess_long_max, assess_long_min, assess_short_pulse

algorithm
it starts with test 0. It takes the number and type of pulses from the kvp assessment_data_1
assuming the user gets all answers correct, the interbeat keeps decreasing from assess_interbeat_max until it reaches assess_interbeat_min, then it goes to the next test (test 1)
test 1 same logic as test 0 but with distraction
text 2 uses pattern mode. It starts with assess_long_max then it keeps decreasing until it reaches assess_long_min
test 3 same as test 2 but with distraction

tools
here are some of the used tools:

logcat
to show logs from android apps, including unity apps.
You have to download the adb logcat, , it should be in the same folder as this manual.
Enable usb debugging in your android phone
connect the phone to the laptop using a usb
go to adb. Exe folder and run the cmd tool there.
First, clear the old stored logs:
adb logcat -b all -c
then show only logs with tag: unity
adb logcat unity: i *: s

webgl version of the training app
it is backed up in a compressed file called:
trainpain19devweb. Rar
it is in elans apk folder in google drive

trainpain level analysis tool (all levels overview)
it goes to the google drive folder (newly created levels) and scraps the contents, then it fills cells with the contents of each level.
Https: //docs. Google. Com/spreadsheets/d/12zsas_wfwioc5rpsueqkauecteraqubcb8vjbtmyl5u/edit#gid=0

ota firmware update
todo

playfab
email: tarek. O. Natsheh@gmail. Com
password: 54niwcuctfmwkz@

email: tarek@trainpain. Com
password: tareknatsheh123

what?
Our backend platform for the unity games.

Why?
To house all the logic and code for the adaptive pulses algorithm, users parameters, create and manage new/existing players data.
Also, it serves as a data warehouse for the recent data. And it archives all the data in s3 (this will change in 2020)

how?
Users parameters:
when a new player is created (using glideapps) the user parameters get initialized. You can find these kvps (key value pairs) of certain players by going to players/[player]/player data (title).
Cloud script:
all the code revisions can be found in the automation tab in playfab website, for each title.
The code is managed via github under sarab5000/playfab:
email: tarek@trainpain. Com
password: tareknatsheh123

https:
https: //github. Com/sarab5000/playfab. Git

useful documentation for writing functions in playfab, and calling them from client (app) and server side:
writing custom cloudscript
data:
you can query the recent data that are not more than 30 days old by going to data/explorer (preview) tab and then choose the title and write the kusto query.
You can find all the relevant queries in the folder kusto queries.
Events handling:
when an event comes from the app we can trigger a code that takes the data inside this event and do something useful.
To create/edit a trigger go to automation/rules, in which you can trigger a function/code when a certain event arrives to playfab.

Deleting a user in playfab:
playfab there are two options to delete a user:
- delete title player
- delete master player

to completely delete a user you should choose (delete master player)

unity configuration

in order for our app to be able to use bluetooth, you need to add the bluetooth permission into unity.
1. Go to <unityinstallationdirecory>\editor\data\playbackengines\androidplayer\apk, copy the androidmanifest. Xml file to your <projectname>assets\plugins\android.
If <projectname>assets\plugins\android doesn't exist yet, create it. The spelling of the folder is case sensitive and must be spelled correctly.
2. Open the copied manifest file from <projectname>assets\plugins\android and add your manifest.
Add the following permission to it:
<uses-permission android: name="android. Permission. Access_coarse_location" />
<uses-permission android: name="android. Permission. Bluetooth"/>
<uses-permission android: name="android. Permission. Bluetooth_admin"/>
3. Save the androidmanifest modification, build and run.
Unity will now include the bluetooth permission in the final build.

In the script:
in start():
you will need to add this to ask for location services:

if (permission. Hasuserauthorizedpermission(permission. Coarselocation))
{
// the user authorized use of the location (do nothing).
}
else
{
// we do not have permission to use the location.
// ask for permission or proceed without the functionality enabled.
Permission. Requestuserpermission(permission. Coarselocation);
}

research protocol

belgian study

welcome message
sent if
a) user created in glide + phone number is put in + checkbox + messages kvp < 1
b) existing user has phone number added into playfab + sms flag is turned to on + messages kvp < 1

daily education sms messages
messages edu1. F-edu28. F sent on calendar days 1-28 to everyone

progress summary message
send progressupdatea. F when user completes 5 sessions
send progressupdateb. F when user completes 10 sessions
send progressupdatea. F when user complete 15 sessions
send progressupdateb. F when user complete 20 sessions
send progressupdatea. F when user complete 25 sessions
send progressupdatec. F when user complete 28 sessions + disable sms messages

generic reminder message
genericremindera. F sent on days 29, 30 if user performed <28 sessions
genericreminderb. F sent on day 31 if user performed <28 sessions

day 32
if user is still in program (i. E. Never completed 28 session), disable from sms

scenarios
user finishes 28 on day 28 or earlier
last message is progressupdatec
never receives genericremindera. F or genericreminderb. F or
user finishes 28 session on day 29 or 30
last message is progressupdatec
user receives genericremindera. F once or twice but does not receive genericreminderb. F
user finishes 28 session on day 31
last message is progressupdatec
user receives genericremindera. F twice and receives genericreminderb. F
user never finishes 28 sessions
last message is genericreminderb. F
user receives genericremindera. F twice and receives genericreminderb. F once

message content (link for doc with full text of each message)
edu1. F-edu28. F
updatea. F: mid phase update
progressupdateb. F: new phase
progressupdatec. F: update on latest phase and progress thus far, and end of program
genericremindera. F
genericreminderb. F [last day to train and thanks for participating]

as of 21-sep-2020:
daily users data extraction and analysis procedure
updating the table:
open the source file (second data source):
https: //docs. Google. Com/spreadsheets/d/179u_d_zbakzmtlq7gkm97b5iqlllor9gosmx7p43qcc/edit? Usp=sharing
go to the tab (playfab queries), and copy the first query starting with (//for table 2)
go to playfab/data/explorer (preview)
paste the query on the query window.
Click on (events. All) under sensory training combo on the left side of the window.
Click on run
to export the data: click on file/export to csv
copy everything inside the csv file.
Go back to the (second data source) sheet, to the (for_table) tab
click on cell c2 and press (ctrl+shift+v) to paste the data as values.
Double click on the cell j2, and choose todays date.
Updating the charts:
open the source file (second data source):
https: //docs. Google. Com/spreadsheets/d/179u_d_zbakzmtlq7gkm97b5iqlllor9gosmx7p43qcc/edit? Usp=sharing
go to the tab (playfab queries), and copy the second query starting with (//for charts 2)
go to playfab/data/explorer (preview)
paste the query on the query window.
Change this (| where timestamp >= (datetime("2020-08-19")))
to the date of yesterday.
Click on (events. All) under sensory training combo on the left side of the window.
Click on run
to export the data: click on file/export to csv
copy everything inside the csv file.
Go back to the (second data source) sheet, to the (for_charts) tab
pay attention to the first timestamp in the csv file on column (thetime), and make sure not to duplicate the data when you paste. If you already have the data of yesterday, just paste it above it as a value (ctrl-shift-v)
now when you go the the charts:
https: //docs. Google. Com/presentation/d/13n5eqvs8w181qbihzhv_ucxkqybsd6khc8cujupwnxk/edit? Usp=sharing
you will see that the table and the charts are updatable.

Phase 2 distraction algorithm logic

in playfab script, after the end of a level, the following logic runs:
interbeat threshold = 7
so when the interbeat (left and right side) is 7 or less, three times in a row:
a counter increases by +1
and when the counter is >= 3, then this logic runs:
if (vibration_intensity = medium 75%) then: phase2 distraction = 65
if (vibration_intensity = high 85%) then: phase2 distraction = 75
if (vibration_intensity = low 55%) then: phase2 distraction = 55

in other words, when the user keeps a very good performance in phase 1 long enough, the distraction will be more in phase 2, unless the vibration intensity is set to low.

Backend

azure functions

starting from 2021-28-11 tarek has started using javascript instead of c# for the azure functions.
Important: always use nvm or nvs for node version control, because it is noted that azure functions usually uses an older version of node, , and it is a pain to keep installing/uninstalling node versions.
For time triggered: for cron expressions guidance, check this cheat sheet

aws
all of the events generated by the title are stored in aws s3
so, sometimes when you look for a certain group of events and cant find them, then you can go to the aws s3 relevant title bucket and get the data from there.

Important notes:
to get the data you will need to user the following aws services:
aws s3: contains the data/events
aws glue and crawler: it parses it from a compressed json . Gz format, to a workable table in a database that you can query using:
athena: used to query the crawled data to get the info you want.

Important:
always create a new iam when the crawler asks you, do not use an existing iam it will not work.
Also, create a new database, do not use an older one.
And dont forget to run the crawler after you create it. It will not run automatically.

Playfab data kusto query api using node js

check this:
https: //learn. Microsoft. Com/en-us/gaming/playfab/features/insights/connectivity/creating-aad-app-for-insights

you have to register an app in azure (search for app registrations).
This app will have:
application (client) id
directory (tenant) id

copy them, youll need them!

Go to (certificates & secrets) and create a new client secret and copy the value of the secret, you will need it!.

Go to (playfab>data>data explorer advanced) and add this registered app as an admin, to do so, run this query:
. Add database <titleid> admin ('aadapp=<app/client id>; <tenant id>')
note: it may highlight the above query in red (like there is a typo), ignore it.

Now, in node js, this would be the setup:
const clustername = "https: //insights. Playfab. Com";
const azureauthority = "laurencetrainpain. Onmicrosoft. Com";
// for more details on how to set this up, check "our sacred manual - software"
const clientid = "9f761261-06bd-4117-80d7-36a868e1df10";
const clientsecret = "ajj8q~ci_u6bd60mhkml4wbhogjcwsknlan2lbgn";

const kustoclient = require("azure-kusto-data"). Client;
const kustoconnectionstringbuilder = require("azure-kusto-data"). Kustoconnectionstringbuilder;

const kcsb = kustoconnectionstringbuilder. Withaadapplicationkeyauthentication(clustername, clientid, clientsecret, azureauthority);
const client = new kustoclient(kcsb);
client. Endpoints. Query = "https: //insights. Playfab. Com/v1/rest/query";
the clientsecret would be the one you copied from azure app registrations.
And you can run the query like this:
const results = await client. Executequeryv1("c0dae", querytext);
alldataaoo = json. Parse(results. Tables[0]). Data;

playfab to azure data explorer adx (data connection)
weve made a test run, and it costs $226/month on the lowest specs for the dev tier cluster.
Here is how to set it up:
all the steps are in this page:
https: //learn. Microsoft. Com/en-us/gaming/playfab/features/data/dataconnections/data-connection-adx

notes regarding the steps in the page:
first section: setting up your resource in azure
step 1: create a new azure ad app
follow the steps, and make sure that you copy the correct value. Its so easy to mistakenly copy the wrong id or key.
Note that these apps have an expiration date! Which means the whole adx playfab connection would stop working after it expires.
I only need to do this step for the azure app: create azure ad application registration
and to get application id and secret value. No need to do the other things like configure delegated permissions for the application registration

step 2: create an adx database
follow the steps, you only need to have the cluster and a database. And copy the name of the database, youll need it,

step 3: grant the azure ad app permission to use the adx database
follow the steps, and when you add a new principal just search for the azure ad app youve created in the search bar and choose it.

In the next section: create an azure data explorer data connection in playfab
in step 3, its confusing and misleading. It says that you have to go to azure ad app and run some commands. Thats totally wrong.
These commands should be executed in the query section in azure data explorer cluster that weve created.
And as of today (2023-07-26) this was the command that playfab asks you to run:
. Add database [nameofthedatabase] admins ('aadapp=application id')

healthbot

a list of healthbot samples:
https: //github. Com/microsoft/botframework-webchat/tree/master/samples

the main healthbot framework github repo:
https: //github. Com/microsoft/botframework-webchat/tree/master

javascript documentation (used in index. Js):
https: //github. Com/microsoft/botframework-directlinejs

using a middleware (for storing a cookie, maybe) (react):
https: //docs. Microsoft. Com/en-us/azure/bot-service/bot-builder-webchat-customization? View=azure-bot-service-4.0#custom-rendering-activity-or-attachment

an example of a middleware (react): https: //github. Com/microsoft/botframework-webchat/blob/master/samples/05. Custom-components/e. Card-components/index. Html

healthbot questionnaire service
as of 12-oct-2021 here is the general flow chart:
https: //lucid. App/publicsegments/view/09d5160d-5a33-49d5-8c15-24d8ff7730ad/image. Png

in order for the service to work properly, the following parameters must be configured:
playfab parameters:
for the user they should have:
statistics kvp: enable-healthbot-surveys = 1
a1_program and date_first_level_played kvps in their (player data (title))
for the title it should have:
in content->title data: a kvp called healthbot. It should look like this:
{
"mt_sinai": {
"7": {
"questionnaire": "cap5",
"method": "sms"
},
"16": {
"questionnaire": "cap8",
"method": "email"
},
"20": {
"questionnaire": "cap10",
"method": "push"
}
},
"testprogram": {
"7": {
"questionnaire": "cap4",
"method": "sms"
},
"16": {
"questionnaire": "cap7",
"method": "email"
},
"20": {
"questionnaire": "cap9",
"method": "push"
}
}
}

where mt_sinai is the name of the program, 7, 16 and 20 are the days passed since the user played their first level. Questionnaire is the name of the questionnaire in azure healthbot. Method is the method that onesignal will use to send the healthbot link (as of today 12-oct-2021 only push notifications are enabled)

azure healthbot parameters:

in the healthbot portal: https: //eastus. Healthbot. Microsoft. Com/account/healthbot2-azexcgb

go to resources->files
it must have all the questionnaires, and they must have the same name of the relevant program.
For example: if we have in playfab a program called mt_sinai with a questionnaire called cap5 - like the above example, then we must have a file called cap5. Json in there.
This cap5. Json file must look like this example:
{
"questions": [
{"q": "how are you? ", "a": "a"},
{"q": "how old are you? ", "a": "b"},
{"q": "how is you father? ", "a": "a"}

],
"answers": {
"a": ["i am fine", "not so good", "not sure"],
"b": ["15", "30", "40"]
}
}

attention:
be careful about the json syntax:
make sure not to change the syntax of: questions, answers, q, a
for example: dont do this: "questions": [
always use double quotes like this 
for example: dont do this: : "a": [i am fine, not so good, not sure],

if you want to use bold or italic, you can use the markdown format, take a look:
https: //docs. Microsoft. Com/en-us/azure/cognitive-services/qnamaker/reference-markdown-format

bot composer:
https: //docs. Microsoft. Com/en-us/composer/install-composer? Tabs=windows

adaptive cards designer:
https: //adaptivecards. Io/designer/
adaptive cards visualizer:
http: //adaptivecards. Io/visualizer/
a working example to build above:
https: //docs. Microsoft. Com/en-us/azure/health-bot/scenario-authoring/adding-cards

onesignal

in-app triggers
trigger is data we send from app to one signal
language
english
french
hebrew
session
i. E. 5
programid
matches playfab
triggerlocation
home [home screen]
mapstart
sessionend
calling specific message
adaptive/responsive: didn't finish yesterday's session [is true]
adaptive/responsive: how easy or hard [is true]
onboarding: initial set up [is true]
troubleshooting: main [is true]
level start
level [#] if trigger, level=4, then show the message

open-source code list
package name
package link
environment
license
license

link
notes
googleapis
https: //github. Com/googleapis/google-api-nodejs-client
nodejs
apache-2.0

used in: backend: azure functions: reminder script
google. Apis. Bigquery. V2

. Net
apache-2.0

used in: backend: azure functions: exports data from playfab to google bq
onesignal-node
https: //github. Com/zeyneloz/onesignal-node
nodejs
mit

used in: backend: azure functions: reminder script
microsoft. Azure. Kusto. Data
https: //www. Nuget. Org/packages/microsoft. Azure. Kusto. Data/9.4.1
. Net

https: //www. Nuget. Org/packages/microsoft. Azure. Kusto. Data/9.4.1/license
used in: backend: azure functions: exports data from playfab to google bq
playfaballsdk

. Net
apache-2.0

used in: backend: azure functions: sends scheduled healthbot survey to users
playfab-sdk

nodejs
apache-2.0

used in: backend: azure functions: sends users gameplay and training analytics to bq
playfab sdk for unity
https: //github. Com/playfab/unitysdk
unity c#
apache-2.0

used in the training app
firebase sdk for unity
https: //github. Com/firebase/firebase-unity-sdk
unity c#
apache-2.0

used in the training app
onesignal sdk for unity
https: //assetstore. Unity. Com/packages/add-ons/services/billing/onesignal-sdk-193316
unity c#
eula
https: //unity3d. Com/legal/as_terms? _ga=2.101194369.1270098773.1643617867-700117522.1642585138
used in the training app
newtonsoft json

unity c#
mit

used in the training app
unity ui extensions
https: //bitbucket. Org/unityuiextensions/unity-ui-extensions/src/release/
unity c#
bsd3
https: //bitbucket. Org/unityuiextensions/unity-ui-extensions/src/release/license. Md
used in the training app
@google-cloud/bigquery

nodejs
apache-2.0

used in: backend: azure functions: exports data from azure healthbot insights into google bq + sends users gameplay and training analytics to bq
healthbot sample
https: //github. Com/microsoft/healthbotcontainersample
nodejs

used in: front and back-end: healthbot chat web app
tabler
https: //github. Com/tabler/tabler
nodejs
mit

used in: trainpain internal dashboard and tools website

tools you may need:
fiddler classic
a tool used for debugging - it shows the logs of a website
https: //docs. Telerik. Com/fiddler/configure-fiddler/tasks/configurefiddler
https: //knowledge. Broadcom. Com/external/article/170523/troubleshoot-web-browser-connectivity-or. Html
https: //www. Ibm. Com/support/pages/collect-http-traffic-capture-fiddler-or-your-web-browser

azure hitrust/hipaa resources compliance guide
before creating any resource, read this:
do not create a function app in the consumption plan, at least use a basic b1 plan.
Do not require a client certificate, it will break everything.
Make sure to add the following configuration environment variable to your function app: website_contentovervnet and set the value to 1
when you create a new network security group, search for network security group not network security groups not application security group
do not use the same service plan for multiple function apps! ! !
It can be a great way to save money, but it turns out it will not let you create more than 1 vnet. So, just create a b1 service plan for each function app.

Ui/ux

shared working files and folders
trainpain game art
https: //drive. Google. Com/drive/u/1/folders/1idnkqmojvjhiv5jeu-x2sjfitsjeqqak

testing art / trainpain fall 2021
https: //drive. Google. Com/drive/u/1/folders/18yxujeioulayocqmvb211znof6j8hbhl